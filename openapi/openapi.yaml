openapi: 3.0.0
paths:
  /api/v1/logistic/records:
    post:
      description: Creates a new tracking or picking record with validation of
        contacts and custom fields
      operationId: LogisticController_create_v1
      parameters:
        - name: type
          required: true
          in: query
          description: Type of logistic record
          schema:
            enum:
              - TRACKING
              - PICKING
            type: string
        - name: originType
          required: false
          in: query
          description: Type of origin document
          schema:
            type: string
        - name: originId
          required: false
          in: query
          description: ID of origin document
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLogisticRecordDto"
      responses:
        "201":
          description: Logistic record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized
      security: &a1
        - bearer: []
      summary: Create a new logistic record
      tags: &a2
        - Logistic Records
    get:
      description: Retrieves a list of logistic records with optional filtering
      operationId: LogisticController_list_v1
      parameters:
        - name: tenantId
          required: false
          in: query
          description: Tenant ID
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: Type of logistic record
          schema:
            type: string
            enum:
              - TRACKING
              - PICKING
        - name: state
          required: false
          in: query
          description: State of the logistic record
          schema:
            type: string
            enum:
              - DRAFT
              - CHECK_PENDING
              - CHECK_IN_PROGRESS
              - CHECK_FINALIZED
              - READY
              - IN_TRANSIT
              - DELIVERED
              - CANCELLED
        - name: messengerId
          required: false
          in: query
          description: Messenger ID
          schema:
            type: string
        - name: labels
          required: false
          in: query
          description: Labels to filter by
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: List of logistic records retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - invalid query parameters
        "401":
          description: Unauthorized
      security: *a1
      summary: List logistic records
      tags: *a2
  /api/v1/logistic/records/{id}:
    get:
      description: Retrieves a specific logistic record with all its details
      operationId: LogisticController_get_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      responses:
        "200":
          description: Logistic record retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Get logistic record by ID
      tags: *a2
    patch:
      description: Updates a logistic record with new data (only allowed fields)
      operationId: LogisticController_update_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLogisticRecordDto"
      responses:
        "200":
          description: Logistic record updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Update logistic record
      tags: *a2
    delete:
      description: Deletes a logistic record and all its associated data
      operationId: LogisticController_remove_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      responses:
        "200":
          description: Logistic record deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Delete logistic record
      tags: *a2
  /api/v1/logistic/records/{id}/check/verify:
    post:
      description: Select/deselect items and update verified quantities during check process
      operationId: LogisticController_verifyItems_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyItemsDto"
      responses:
        "200":
          description: Items verified successfully
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Verify items in logistic record
      tags: *a2
  /api/v1/logistic/records/{id}/check/finalize:
    post:
      description: Finalizes the check process after at least one item has been verified
      operationId: LogisticController_finalizeCheck_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      responses:
        "200":
          description: Check finalized successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - no items verified
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Finalize item check
      tags: *a2
  /api/v1/logistic/records/{id}/state:
    post:
      description: Updates the state of a logistic record for Kanban board management
      operationId: LogisticController_changeState_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeStateDto"
      responses:
        "200":
          description: State changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - invalid state
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Change logistic record state
      tags: *a2
  /api/v1/logistic/records/{id}/labels:
    patch:
      description: Updates the labels for a logistic record (validated against custom
        fields)
      operationId: LogisticController_updateLabels_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLabelsDto"
      responses:
        "200":
          description: Labels updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - invalid labels
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Update logistic record labels
      tags: *a2
  /api/v1/logistic/records/{id}/messenger/assign:
    post:
      description: Assigns a messenger to handle the logistic record
      operationId: LogisticController_assignMessenger_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignMessengerDto"
      responses:
        "200":
          description: Messenger assigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Assign messenger to logistic record
      tags: *a2
  /api/v1/logistic/records/{id}/print:
    post:
      description: Generates and uploads a PDF guide for the logistic record
      operationId: LogisticController_print_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      responses:
        "200":
          description: Guide printed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Print logistic record guide
      tags: *a2
  /api/v1/logistic/records/{id}/notify:
    post:
      description: Sends tracking link notification via specified channels
      operationId: LogisticController_notify_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotifyDto"
      responses:
        "200":
          description: Notification sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  link:
                    type: string
                    description: Tracking link
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Send tracking notification
      tags: *a2
  /api/v1/logistic/records/{id}/duplicate:
    post:
      description: Creates a new logistic record based on an existing one
      operationId: LogisticController_duplicate_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID to duplicate
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DuplicateDto"
      responses:
        "201":
          description: Logistic record duplicated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogisticRecordResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Duplicate logistic record
      tags: *a2
  /api/v1/logistic/records/{id}/split:
    post:
      description: Splits a logistic record into multiple smaller records
      operationId: LogisticController_split_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Logistic record ID to split
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SplitRecordsDto"
      responses:
        "200":
          description: Logistic record split successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  children:
                    type: array
                    items:
                      $ref: "#/components/schemas/LogisticRecordResponseDto"
        "400":
          description: Bad request - validation failed
        "401":
          description: Unauthorized
        "404":
          description: Logistic record not found
      security: *a1
      summary: Split logistic record
      tags: *a2
  /api/health:
    get:
      description: Returns the health status of the application and its dependencies
      operationId: HealthController_check
      parameters: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 123.456
                  database:
                    type: string
                    example: connected
                  version:
                    type: string
                    example: 1.0.0
        "503":
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 123.456
                  database:
                    type: string
                    example: disconnected
                  version:
                    type: string
                    example: 1.0.0
                  error:
                    type: string
                    example: Database connection failed
      summary: Health check endpoint
      tags: &a3
        - Health
  /api/health/ready:
    get:
      description: Returns whether the service is ready to accept traffic
      operationId: HealthController_ready
      parameters: []
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  timestamp:
                    type: string
                    format: date-time
        "503":
          description: Service is not ready
      summary: Readiness check endpoint
      tags: *a3
  /api/health/live:
    get:
      description: Returns whether the service is alive (basic process check)
      operationId: HealthController_live
      parameters: []
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: alive
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 123.456
      summary: Liveness check endpoint
      tags: *a3
info:
  title: Logistics Microservice
  description: ""
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateLogisticItemDto:
      type: object
      properties:
        originItemId:
          type: string
          description: Origin item ID from source document
        sku:
          type: string
          description: SKU of the item
        name:
          type: string
          description: Name of the item
        qtyExpected:
          type: number
          description: Expected quantity
          minimum: 1
      required:
        - qtyExpected
    CreateLogisticRecordDto:
      type: object
      properties:
        tenantId:
          type: string
          description: Tenant ID
        senderContactId:
          type: string
          description: Sender contact ID
        recipientContactId:
          type: string
          description: Recipient contact ID
        carrierId:
          type: string
          description: Carrier ID
        labels:
          description: Labels for categorization
          type: array
          items:
            type: string
        extra:
          type: object
          description: Extra fields data
        items:
          description: Items in this record
          type: array
          items:
            $ref: "#/components/schemas/CreateLogisticItemDto"
        userId:
          type: string
          description: User ID who created the record
      required:
        - tenantId
        - senderContactId
        - recipientContactId
    LogisticItemResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Item ID
        recordId:
          type: string
          description: Record ID
        originItemId:
          type: string
          description: Origin item ID
        sku:
          type: string
          description: SKU
        name:
          type: string
          description: Item name
        qtyExpected:
          type: number
          description: Expected quantity
        qtyVerified:
          type: number
          description: Verified quantity
        selected:
          type: boolean
          description: Whether item is selected
      required:
        - id
        - recordId
        - qtyExpected
        - qtyVerified
        - selected
    AuditLogResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Audit log ID
        tenantId:
          type: string
          description: Tenant ID
        recordId:
          type: string
          description: Record ID
        action:
          type: string
          description: Action performed
        payload:
          type: object
          description: Action payload
        createdBy:
          type: string
          description: User who performed the action
        createdAt:
          format: date-time
          type: string
          description: When the action was performed
      required:
        - id
        - tenantId
        - recordId
        - action
        - createdAt
    LogisticRecordResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Record ID
        tenantId:
          type: string
          description: Tenant ID
        type:
          type: string
          description: Type of record
          enum:
            - TRACKING
            - PICKING
        guideNumber:
          type: string
          description: Unique guide number
        originType:
          type: string
          description: Origin document type
        originId:
          type: string
          description: Origin document ID
        senderContactId:
          type: string
          description: Sender contact ID
        recipientContactId:
          type: string
          description: Recipient contact ID
        carrierId:
          type: string
          description: Carrier ID
        messengerId:
          type: string
          description: Assigned messenger ID
        state:
          type: string
          description: Current state
          enum:
            - DRAFT
            - CHECK_PENDING
            - CHECK_IN_PROGRESS
            - CHECK_FINALIZED
            - READY
            - IN_TRANSIT
            - DELIVERED
            - CANCELLED
        labels:
          description: Labels
          type: array
          items:
            type: string
        extra:
          type: object
          description: Extra fields data
        summary:
          type: object
          description: Summary data
        fileUri:
          type: string
          description: File URI for printed guide
        parentRecordId:
          type: string
          description: Parent record ID
        children:
          description: Child records
          type: array
          items:
            $ref: "#/components/schemas/LogisticRecordResponseDto"
        items:
          description: Items in this record
          type: array
          items:
            $ref: "#/components/schemas/LogisticItemResponseDto"
        audit:
          description: Audit logs
          type: array
          items:
            $ref: "#/components/schemas/AuditLogResponseDto"
        createdBy:
          type: string
          description: User who created the record
        updatedBy:
          type: string
          description: User who last updated the record
        createdAt:
          format: date-time
          type: string
          description: Creation timestamp
        updatedAt:
          format: date-time
          type: string
          description: Last update timestamp
        checkStartedAt:
          format: date-time
          type: string
          description: Check start timestamp
        checkFinalizedAt:
          format: date-time
          type: string
          description: Check finalization timestamp
        checkFinalizedBy:
          type: string
          description: User who finalized the check
      required:
        - id
        - tenantId
        - type
        - guideNumber
        - senderContactId
        - recipientContactId
        - state
        - labels
        - items
        - audit
        - createdAt
        - updatedAt
    UpdateLogisticRecordDto:
      type: object
      properties:
        labels:
          description: Labels for categorization
          type: array
          items:
            type: string
        extra:
          type: object
          description: Extra fields data
        carrierId:
          type: string
          description: Carrier ID
        userId:
          type: string
          description: User ID who updated the record
    VerifyItemDto:
      type: object
      properties:
        id:
          type: string
          description: Item ID to verify
        selected:
          type: boolean
          description: Whether the item is selected/verified
        qtyVerified:
          type: number
          description: Verified quantity
          minimum: 0
      required:
        - id
        - selected
    VerifyItemsDto:
      type: object
      properties:
        items:
          description: Items to verify
          type: array
          items:
            $ref: "#/components/schemas/VerifyItemDto"
      required:
        - items
    ChangeStateDto:
      type: object
      properties:
        state:
          type: string
          description: New state for the logistic record
          enum:
            - DRAFT
            - CHECK_PENDING
            - CHECK_IN_PROGRESS
            - CHECK_FINALIZED
            - READY
            - IN_TRANSIT
            - DELIVERED
            - CANCELLED
          example: READY
      required:
        - state
    UpdateLabelsDto:
      type: object
      properties:
        labels:
          description: Labels for categorization and filtering
          example:
            - urgent
            - fragile
            - express
          type: array
          items:
            type: string
      required:
        - labels
    AssignMessengerDto:
      type: object
      properties:
        messengerId:
          type: string
          description: Messenger ID to assign to the logistic record
          example: 123e4567-e89b-12d3-a456-426614174000
      required:
        - messengerId
    NotifyDto:
      type: object
      properties:
        channels:
          type: array
          description: Notification channels to use
          example:
            - EMAIL
            - SMS
          items:
            type: string
            enum:
              - EMAIL
              - SMS
              - WHATSAPP
      required:
        - channels
    DuplicateDto:
      type: object
      properties:
        copyExtra:
          type: boolean
          description: Whether to copy extra fields from the original record
          default: false
    SplitItemDto:
      type: object
      properties:
        id:
          type: string
          description: Item ID to split
        qty:
          type: number
          description: Quantity for this split
          minimum: 1
      required:
        - id
        - qty
    SplitDto:
      type: object
      properties:
        items:
          description: Items and quantities for this split
          type: array
          items:
            $ref: "#/components/schemas/SplitItemDto"
        labels:
          description: Labels for this split
          type: array
          items:
            type: string
      required:
        - items
    SplitRecordsDto:
      type: object
      properties:
        splits:
          description: Splits to create
          type: array
          items:
            $ref: "#/components/schemas/SplitDto"
      required:
        - splits
